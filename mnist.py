# -*- coding: utf-8 -*-
"""Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EyB1hzf5WSSYnqOwqFRysPTaRe2OhWhw
"""

import tensorflow as tf

mnist = tf.keras.datasets.mnist

#loading data
(x_train,y_train),(x_test,y_test) = mnist.load_data()


#model
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation = "relu"))
model.add(tf.keras.layers.Dense(128, activation = "relu"))
model.add(tf.keras.layers.Dense(10, activation = "softmax"))

#model compile
model.compile(optimizer ='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])
#train model
model.fit(x_train,y_train,epochs = 3)

val_loss, val_acc = model.evaluate(x_test,y_test)
print("Val loss : ",val_loss)
print("val acc : ",val_acc)

import matplotlib.pyplot as plt
plt.imshow(x_train[0])
plt.show()

model.save("epic_num_reader.model")

new_model = tf.keras.models.load_model("epic_num_reader.model")

predictions = new_model.predict([x_test])

import numpy as np
print(np.argmax(predictions[301]))

plt.imshow(x_test[301])
plt.show

import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation
from tensorflow.keras.layers import Flatten,Conv2D,MaxPooling2D
from tensorflow.keras.callbacks import TensorBoard
import pickle
import time

NAME = "Sucellus VERSION {}".format(int(time.time()))

pickle_in = open("X.pickle","rb")
X = pickle.load(pickle_in)

pickle_in = open("y.pickle","rb")
y = pickle.load(pickle_in)

X = X/255.0
dense_layers = [2]
layer_sizes = [256]
conv_layers = [3]

for dense_layer in dense_layers:
  for layer_size in layer_sizes:
    for conv_layer in conv_layers:
      NAME = "{} -conv -- {} -nodes -- {} -dense--{}".format(conv_layer,layer_size,dense_layer, int(time.time()))
      tensorboard = TensorBoard(log_dir = 'logs/{}'.format(NAME))
      print(NAME)
      model = Sequential()

      model.add(Conv2D(layer_size,(3,3),input_shape = X.shape[1:]))
      model.add(Activation("relu"))
      model.add(MaxPooling2D(pool_size =(2,2)))

      for l in range(conv_layer - 1):
        model.add(Conv2D(layer_size,(3,3)))
        model.add(Activation("relu"))
        model.add(MaxPooling2D(pool_size =(2,2)))

      model.add(Flatten())
      for l in range(dense_layer):
        model.add(Dense(layer_size))
        model.add(Activation("relu"))
        model.add(Dropout(0,2))


      model.add(Dense(1))
      model.add(Activation("sigmoid"))

      model.compile(loss="sparse_categorical_crossentropy",
                    optimizer = "adam",
                    metrics=["accuracy"])

      model.fit(X,y, batch_size =32,epochs=3, validation_split = 0.15,callback = [tensorboard])
model.save('FireDetectionUav')